var app=function(){"use strict";function e(){}function r(e,r){for(const s in r)e[s]=r[s];return e}function s(e){return e()}function t(){return Object.create(null)}function o(e){e.forEach(s)}function n(e){return"function"==typeof e}function i(e,r){return e!=e?r==r:e!==r||e&&"object"==typeof e||"function"==typeof e}function a(e,r){e.appendChild(r)}function c(e,r,s){e.insertBefore(r,s||null)}function p(e){e.parentNode.removeChild(e)}function l(e){return document.createElement(e)}function u(e){return document.createTextNode(e)}function d(){return u(" ")}function m(){return u("")}function g(e,r,s){null==s?e.removeAttribute(r):e.getAttribute(r)!==s&&e.setAttribute(r,s)}function T(e,r){r=""+r,e.wholeText!==r&&(e.data=r)}let h;function E(e){h=e}function w(){if(!h)throw new Error("Function called outside component initialization");return h}function f(e){w().$$.on_mount.push(e)}function b(){const e=w();return(r,s)=>{const t=e.$$.callbacks[r];if(t){const o=function(e,r){const s=document.createEvent("CustomEvent");return s.initCustomEvent(e,!1,!1,r),s}(r,s);t.slice().forEach((r=>{r.call(e,o)}))}}}function _(e,r){const s=e.$$.callbacks[r.type];s&&s.slice().forEach((e=>e(r)))}const v=[],y=[],G=[],k=[],P=Promise.resolve();let O=!1;function A(){O||(O=!0,P.then(U))}function S(){return A(),P}function R(e){G.push(e)}let F=!1;const C=new Set;function U(){if(!F){F=!0;do{for(let e=0;e<v.length;e+=1){const r=v[e];E(r),D(r.$$)}for(E(null),v.length=0;y.length;)y.pop()();for(let e=0;e<G.length;e+=1){const r=G[e];C.has(r)||(C.add(r),r())}G.length=0}while(v.length);for(;k.length;)k.pop()();O=!1,F=!1,C.clear()}}function D(e){if(null!==e.fragment){e.update(),o(e.before_update);const r=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,r),e.after_update.forEach(R)}}const $=new Set;let j;function L(){j={r:0,c:[],p:j}}function q(){j.r||o(j.c),j=j.p}function I(e,r){e&&e.i&&($.delete(e),e.i(r))}function x(e,r,s,t){if(e&&e.o){if($.has(e))return;$.add(e),j.c.push((()=>{$.delete(e),t&&(s&&e.d(1),t())})),e.o(r)}}function H(e,r){const s={},t={},o={$$scope:1};let n=e.length;for(;n--;){const i=e[n],a=r[n];if(a){for(const e in i)e in a||(t[e]=1);for(const e in a)o[e]||(s[e]=a[e],o[e]=1);e[n]=a}else for(const e in i)o[e]=1}for(const e in t)e in s||(s[e]=void 0);return s}function W(e){return"object"==typeof e&&null!==e?e:{}}function B(e){e&&e.c()}function z(e,r,t){const{fragment:i,on_mount:a,on_destroy:c,after_update:p}=e.$$;i&&i.m(r,t),R((()=>{const r=a.map(s).filter(n);c?c.push(...r):o(r),e.$$.on_mount=[]})),p.forEach(R)}function M(e,r){const s=e.$$;null!==s.fragment&&(o(s.on_destroy),s.fragment&&s.fragment.d(r),s.on_destroy=s.fragment=null,s.ctx=[])}function N(r,s,n,i,a,c,l=[-1]){const u=h;E(r);const d=s.props||{},m=r.$$={fragment:null,ctx:null,props:c,update:e,not_equal:a,bound:t(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(u?u.$$.context:[]),callbacks:t(),dirty:l,skip_bound:!1};let g=!1;if(m.ctx=n?n(r,d,((e,s,...t)=>{const o=t.length?t[0]:s;return m.ctx&&a(m.ctx[e],m.ctx[e]=o)&&(!m.skip_bound&&m.bound[e]&&m.bound[e](o),g&&function(e,r){-1===e.$$.dirty[0]&&(v.push(e),A(),e.$$.dirty.fill(0)),e.$$.dirty[r/31|0]|=1<<r%31}(r,e)),s})):[],m.update(),g=!0,o(m.before_update),m.fragment=!!i&&i(m.ctx),s.target){if(s.hydrate){const e=function(e){return Array.from(e.childNodes)}(s.target);m.fragment&&m.fragment.l(e),e.forEach(p)}else m.fragment&&m.fragment.c();s.intro&&I(r.$$.fragment),z(r,s.target,s.anchor),U()}E(u)}class K{$destroy(){M(this,1),this.$destroy=e}$on(e,r){const s=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return s.push(r),()=>{const e=s.indexOf(r);-1!==e&&s.splice(e,1)}}$set(e){var r;this.$$set&&(r=e,0!==Object.keys(r).length)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const V=[];function Y(e,r){return{subscribe:J(e,r).subscribe}}function J(r,s=e){let t;const o=[];function n(e){if(i(r,e)&&(r=e,t)){const e=!V.length;for(let e=0;e<o.length;e+=1){const s=o[e];s[1](),V.push(s,r)}if(e){for(let e=0;e<V.length;e+=2)V[e][0](V[e+1]);V.length=0}}}return{set:n,update:function(e){n(e(r))},subscribe:function(i,a=e){const c=[i,a];return o.push(c),1===o.length&&(t=s(n)||e),i(r),()=>{const e=o.indexOf(c);-1!==e&&o.splice(e,1),0===o.length&&(t(),t=null)}}}}function Z(r,s,t){const i=!Array.isArray(r),a=i?[r]:r,c=s.length<2;return Y(t,(r=>{let t=!1;const p=[];let l=0,u=e;const d=()=>{if(l)return;u();const t=s(i?p[0]:p,r);c?r(t):u=n(t)?t:e},m=a.map(((r,s)=>function(r,...s){if(null==r)return e;const t=r.subscribe(...s);return t.unsubscribe?()=>t.unsubscribe():t}(r,(e=>{p[s]=e,l&=~(1<<s),t&&d()}),(()=>{l|=1<<s}))));return t=!0,d(),function(){o(m),u()}}))}function X(e){let s,t,o;const n=[e[2]];var i=e[0];function a(e){let s={};for(let e=0;e<n.length;e+=1)s=r(s,n[e]);return{props:s}}return i&&(s=new i(a()),s.$on("routeEvent",e[7])),{c(){s&&B(s.$$.fragment),t=m()},m(e,r){s&&z(s,e,r),c(e,t,r),o=!0},p(e,r){const o=4&r?H(n,[W(e[2])]):{};if(i!==(i=e[0])){if(s){L();const e=s;x(e.$$.fragment,1,0,(()=>{M(e,1)})),q()}i?(s=new i(a()),s.$on("routeEvent",e[7]),B(s.$$.fragment),I(s.$$.fragment,1),z(s,t.parentNode,t)):s=null}else i&&s.$set(o)},i(e){o||(s&&I(s.$$.fragment,e),o=!0)},o(e){s&&x(s.$$.fragment,e),o=!1},d(e){e&&p(t),s&&M(s,e)}}}function Q(e){let s,t,o;const n=[{params:e[1]},e[2]];var i=e[0];function a(e){let s={};for(let e=0;e<n.length;e+=1)s=r(s,n[e]);return{props:s}}return i&&(s=new i(a()),s.$on("routeEvent",e[6])),{c(){s&&B(s.$$.fragment),t=m()},m(e,r){s&&z(s,e,r),c(e,t,r),o=!0},p(e,r){const o=6&r?H(n,[2&r&&{params:e[1]},4&r&&W(e[2])]):{};if(i!==(i=e[0])){if(s){L();const e=s;x(e.$$.fragment,1,0,(()=>{M(e,1)})),q()}i?(s=new i(a()),s.$on("routeEvent",e[6]),B(s.$$.fragment),I(s.$$.fragment,1),z(s,t.parentNode,t)):s=null}else i&&s.$set(o)},i(e){o||(s&&I(s.$$.fragment,e),o=!0)},o(e){s&&x(s.$$.fragment,e),o=!1},d(e){e&&p(t),s&&M(s,e)}}}function ee(e){let r,s,t,o;const n=[Q,X],i=[];function a(e,r){return e[1]?0:1}return r=a(e),s=i[r]=n[r](e),{c(){s.c(),t=m()},m(e,s){i[r].m(e,s),c(e,t,s),o=!0},p(e,[o]){let c=r;r=a(e),r===c?i[r].p(e,o):(L(),x(i[c],1,1,(()=>{i[c]=null})),q(),s=i[r],s||(s=i[r]=n[r](e),s.c()),I(s,1),s.m(t.parentNode,t))},i(e){o||(I(s),o=!0)},o(e){x(s),o=!1},d(e){i[r].d(e),e&&p(t)}}}function re(){const e=window.location.href.indexOf("#/");let r=e>-1?window.location.href.substr(e+1):"/";const s=r.indexOf("?");let t="";return s>-1&&(t=r.substr(s+1),r=r.substr(0,s)),{location:r,querystring:t}}const se=Y(null,(function(e){e(re());const r=()=>{e(re())};return window.addEventListener("hashchange",r,!1),function(){window.removeEventListener("hashchange",r,!1)}}));Z(se,(e=>e.location)),Z(se,(e=>e.querystring));function te(e,r,s){let{routes:t={}}=r,{prefix:o=""}=r,{restoreScrollState:n=!1}=r;class i{constructor(e,r){if(!r||"function"!=typeof r&&("object"!=typeof r||!0!==r._sveltesparouter))throw Error("Invalid component object");if(!e||"string"==typeof e&&(e.length<1||"/"!=e.charAt(0)&&"*"!=e.charAt(0))||"object"==typeof e&&!(e instanceof RegExp))throw Error('Invalid value for "path" argument - strings must start with / or *');const{pattern:s,keys:t}=function(e,r){if(e instanceof RegExp)return{keys:!1,pattern:e};var s,t,o,n,i=[],a="",c=e.split("/");for(c[0]||c.shift();o=c.shift();)"*"===(s=o[0])?(i.push("wild"),a+="/(.*)"):":"===s?(t=o.indexOf("?",1),n=o.indexOf(".",1),i.push(o.substring(1,~t?t:~n?n:o.length)),a+=~t&&!~n?"(?:/([^/]+?))?":"/([^/]+?)",~n&&(a+=(~t?"?":"")+"\\"+o.substring(n))):a+="/"+o;return{keys:i,pattern:new RegExp("^"+a+(r?"(?=$|/)":"/?$"),"i")}}(e);this.path=e,"object"==typeof r&&!0===r._sveltesparouter?(this.component=r.component,this.conditions=r.conditions||[],this.userData=r.userData,this.props=r.props||{}):(this.component=()=>Promise.resolve(r),this.conditions=[],this.props={}),this._pattern=s,this._keys=t}match(e){if(o)if("string"==typeof o){if(!e.startsWith(o))return null;e=e.substr(o.length)||"/"}else if(o instanceof RegExp){const r=e.match(o);if(!r||!r[0])return null;e=e.substr(r[0].length)||"/"}const r=this._pattern.exec(e);if(null===r)return null;if(!1===this._keys)return r;const s={};let t=0;for(;t<this._keys.length;){try{s[this._keys[t]]=decodeURIComponent(r[t+1]||"")||null}catch(e){s[this._keys[t]]=null}t++}return s}async checkConditions(e){for(let r=0;r<this.conditions.length;r++)if(!await this.conditions[r](e))return!1;return!0}}const a=[];t instanceof Map?t.forEach(((e,r)=>{a.push(new i(r,e))})):Object.keys(t).forEach((e=>{a.push(new i(e,t[e]))}));let c=null,p=null,l={};const u=b();async function d(e,r){await S(),u(e,r)}let m=null;var g;n&&(window.addEventListener("popstate",(e=>{m=e.state&&e.state.scrollY?e.state:null})),g=()=>{m?window.scrollTo(m.scrollX,m.scrollY):window.scrollTo(0,0)},w().$$.after_update.push(g));let T=null,h=null;return se.subscribe((async e=>{T=e;let r=0;for(;r<a.length;){const t=a[r].match(e.location);if(!t){r++;continue}const o={route:a[r].path,location:e.location,querystring:e.querystring,userData:a[r].userData};if(!await a[r].checkConditions(o))return s(0,c=null),h=null,void d("conditionsFailed",o);d("routeLoading",Object.assign({},o));const n=a[r].component;if(h!=n){n.loading?(s(0,c=n.loading),h=n,s(1,p=n.loadingParams),s(2,l={}),d("routeLoaded",Object.assign({},o,{component:c,name:c.name}))):(s(0,c=null),h=null);const r=await n();if(e!=T)return;s(0,c=r&&r.default||r),h=n}return t&&"object"==typeof t&&Object.keys(t).length?s(1,p=t):s(1,p=null),s(2,l=a[r].props),void d("routeLoaded",Object.assign({},o,{component:c,name:c.name}))}s(0,c=null),h=null})),e.$$set=e=>{"routes"in e&&s(3,t=e.routes),"prefix"in e&&s(4,o=e.prefix),"restoreScrollState"in e&&s(5,n=e.restoreScrollState)},e.$$.update=()=>{32&e.$$.dirty&&(history.scrollRestoration=n?"manual":"auto")},[c,p,l,t,o,n,function(r){_(e,r)},function(r){_(e,r)}]}class oe extends K{constructor(e){super(),N(this,e,te,ee,i,{routes:3,prefix:4,restoreScrollState:5})}}function ne(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&"version"in process?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}var ie=function e(r,s,t,o){if("function"!=typeof t)throw new Error("method for before hook must be a function");o||(o={});if(Array.isArray(s))return s.reverse().reduce((function(s,t){return e.bind(null,r,t,s,o)}),t)();return Promise.resolve().then((function(){return r.registry[s]?r.registry[s].reduce((function(e,r){return r.hook.bind(null,e,o)}),t)():t(o)}))};var ae=function(e,r,s,t){var o=t;e.registry[s]||(e.registry[s]=[]);"before"===r&&(t=function(e,r){return Promise.resolve().then(o.bind(null,r)).then(e.bind(null,r))});"after"===r&&(t=function(e,r){var s;return Promise.resolve().then(e.bind(null,r)).then((function(e){return o(s=e,r)})).then((function(){return s}))});"error"===r&&(t=function(e,r){return Promise.resolve().then(e.bind(null,r)).catch((function(e){return o(e,r)}))});e.registry[s].push({hook:t,orig:o})};var ce=function(e,r,s){if(!e.registry[r])return;var t=e.registry[r].map((function(e){return e.orig})).indexOf(s);if(-1===t)return;e.registry[r].splice(t,1)};var pe=Function.bind,le=pe.bind(pe);function ue(e,r,s){var t=le(ce,null).apply(null,s?[r,s]:[r]);e.api={remove:t},e.remove=t,["before","error","after","wrap"].forEach((function(t){var o=s?[r,t,s]:[r,t];e[t]=e.api[t]=le(ae,null).apply(null,o)}))}function de(){var e={registry:{}},r=ie.bind(null,e);return ue(r,e),r}var me=!1;function ge(){return me||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),me=!0),de()}ge.Singular=function(){var e={registry:{}},r=ie.bind(null,e,"h");return ue(r,e,"h"),r}.bind(),ge.Collection=de.bind();var Te=ge,he=ge,Ee=ge.Singular,we=ge.Collection;
/*!
     * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
     *
     * Copyright (c) 2014-2017, Jon Schlinkert.
     * Released under the MIT License.
     */
function fe(e){return"[object Object]"===Object.prototype.toString.call(e)}function be(e){var r,s;return!1!==fe(e)&&(void 0===(r=e.constructor)||!1!==fe(s=r.prototype)&&!1!==s.hasOwnProperty("isPrototypeOf"))}function _e(e,r){const s=Object.assign({},e);return Object.keys(r).forEach((t=>{be(r[t])?t in e?s[t]=_e(e[t],r[t]):Object.assign(s,{[t]:r[t]}):Object.assign(s,{[t]:r[t]})})),s}function ve(e){for(const r in e)void 0===e[r]&&delete e[r];return e}function ye(e,r,s){if("string"==typeof r){let[e,t]=r.split(" ");s=Object.assign(t?{method:e,url:t}:{url:e},s)}else s=Object.assign({},r);var t;s.headers=(t=s.headers)?Object.keys(t).reduce(((e,r)=>(e[r.toLowerCase()]=t[r],e)),{}):{},ve(s),ve(s.headers);const o=_e(e||{},s);return e&&e.mediaType.previews.length&&(o.mediaType.previews=e.mediaType.previews.filter((e=>!o.mediaType.previews.includes(e))).concat(o.mediaType.previews)),o.mediaType.previews=o.mediaType.previews.map((e=>e.replace(/-preview/,""))),o}Te.Hook=he,Te.Singular=Ee,Te.Collection=we;const Ge=/\{[^}]+\}/g;function ke(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function Pe(e,r){return Object.keys(e).filter((e=>!r.includes(e))).reduce(((r,s)=>(r[s]=e[s],r)),{})}function Oe(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map((function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e})).join("")}function Ae(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function Se(e,r,s){return r="+"===e||"#"===e?Oe(r):Ae(r),s?Ae(s)+"="+r:r}function Re(e){return null!=e}function Fe(e){return";"===e||"&"===e||"?"===e}function Ce(e,r){var s=["+","#",".","/",";","?","&"];return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,(function(e,t,o){if(t){let e="";const o=[];if(-1!==s.indexOf(t.charAt(0))&&(e=t.charAt(0),t=t.substr(1)),t.split(/,/g).forEach((function(s){var t=/([^:\*]*)(?::(\d+)|(\*))?/.exec(s);o.push(function(e,r,s,t){var o=e[s],n=[];if(Re(o)&&""!==o)if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),t&&"*"!==t&&(o=o.substring(0,parseInt(t,10))),n.push(Se(r,o,Fe(r)?s:""));else if("*"===t)Array.isArray(o)?o.filter(Re).forEach((function(e){n.push(Se(r,e,Fe(r)?s:""))})):Object.keys(o).forEach((function(e){Re(o[e])&&n.push(Se(r,o[e],e))}));else{const e=[];Array.isArray(o)?o.filter(Re).forEach((function(s){e.push(Se(r,s))})):Object.keys(o).forEach((function(s){Re(o[s])&&(e.push(Ae(s)),e.push(Se(r,o[s].toString())))})),Fe(r)?n.push(Ae(s)+"="+e.join(",")):0!==e.length&&n.push(e.join(","))}else";"===r?Re(o)&&n.push(Ae(s)):""!==o||"&"!==r&&"?"!==r?""===o&&n.push(""):n.push(Ae(s)+"=");return n}(r,e,t[1],t[2]||t[3]))})),e&&"+"!==e){var n=",";return"?"===e?n="&":"#"!==e&&(n=e),(0!==o.length?e:"")+o.join(n)}return o.join(",")}return Oe(o)}))}function Ue(e){let r,s=e.method.toUpperCase(),t=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),n=Pe(e,["method","baseUrl","url","headers","request","mediaType"]);const i=function(e){const r=e.match(Ge);return r?r.map(ke).reduce(((e,r)=>e.concat(r)),[]):[]}(t);var a;t=(a=t,{expand:Ce.bind(null,a)}).expand(n),/^http/.test(t)||(t=e.baseUrl+t);const c=Pe(n,Object.keys(e).filter((e=>i.includes(e))).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map((r=>r.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,"application/vnd$1$2."+e.mediaType.format))).join(",")),e.mediaType.previews.length)){const r=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=r.concat(e.mediaType.previews).map((r=>`application/vnd.github.${r}-preview${e.mediaType.format?"."+e.mediaType.format:"+json"}`)).join(",")}return["GET","HEAD"].includes(s)?t=function(e,r){const s=/\?/.test(e)?"&":"?",t=Object.keys(r);return 0===t.length?e:e+s+t.map((e=>"q"===e?"q="+r.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(r[e])}`)).join("&")}(t,c):"data"in c?r=c.data:Object.keys(c).length?r=c:o["content-length"]=0,o["content-type"]||void 0===r||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(s)&&void 0===r&&(r=""),Object.assign({method:s,url:t,headers:o},void 0!==r?{body:r}:null,e.request?{request:e.request}:null)}function De(e,r,s){return Ue(ye(e,r,s))}const $e=function e(r,s){const t=ye(r,s),o=De.bind(null,t);return Object.assign(o,{DEFAULTS:t,defaults:e.bind(null,t),merge:ye.bind(null,t),parse:Ue})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":"octokit-endpoint.js/6.0.10 "+ne()},mediaType:{format:"",previews:[]}});var je,Le,qe=(function(e,r){var s=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==s)return s;throw new Error("unable to locate global object")}();e.exports=r=s.fetch,s.fetch&&(r.default=s.fetch.bind(s)),r.Headers=s.Headers,r.Request=s.Request,r.Response=s.Response}(Le={path:je,exports:{},require:function(e,r){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==r&&Le.path)}},Le.exports),Le.exports);class Ie extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var xe=function e(r,s){if(r&&s)return e(r)(s);if("function"!=typeof r)throw new TypeError("need wrapper function");return Object.keys(r).forEach((function(e){t[e]=r[e]})),t;function t(){for(var e=new Array(arguments.length),s=0;s<e.length;s++)e[s]=arguments[s];var t=r.apply(this,e),o=e[e.length-1];return"function"==typeof t&&t!==o&&Object.keys(o).forEach((function(e){t[e]=o[e]})),t}};var He=xe(Be),We=xe(ze);function Be(e){var r=function(){return r.called?r.value:(r.called=!0,r.value=e.apply(this,arguments))};return r.called=!1,r}function ze(e){var r=function(){if(r.called)throw new Error(r.onceError);return r.called=!0,r.value=e.apply(this,arguments)},s=e.name||"Function wrapped with `once`";return r.onceError=s+" shouldn't be called more than once",r.called=!1,r}Be.proto=Be((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return Be(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return ze(this)},configurable:!0})})),He.strict=We;const Me=He((e=>console.warn(e)));class Ne extends Error{constructor(e,r,s){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=r,Object.defineProperty(this,"code",{get:()=>(Me(new Ie("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),r)}),this.headers=s.headers||{};const t=Object.assign({},s.request);s.request.headers.authorization&&(t.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),t.url=t.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=t}}function Ke(e){(be(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let r,s,t={};return(e.request&&e.request.fetch||qe)(e.url,Object.assign({method:e.method,body:e.body,headers:e.headers,redirect:e.redirect},e.request)).then((o=>{s=o.url,r=o.status;for(const e of o.headers)t[e[0]]=e[1];if(204===r||205===r)return;if("HEAD"===e.method){if(r<400)return;throw new Ne(o.statusText,r,{headers:t,request:e})}if(304===r)throw new Ne("Not modified",r,{headers:t,request:e});if(r>=400)return o.text().then((s=>{const o=new Ne(s,r,{headers:t,request:e});try{let e=JSON.parse(o.message);Object.assign(o,e);let r=e.errors;o.message=o.message+": "+r.map(JSON.stringify).join(", ")}catch(e){}throw o}));const n=o.headers.get("content-type");return/application\/json/.test(n)?o.json():!n||/^text\/|charset=utf-8$/.test(n)?o.text():function(e){return e.arrayBuffer()}(o)})).then((e=>({status:r,url:s,headers:t,data:e}))).catch((r=>{if(r instanceof Ne)throw r;throw new Ne(r.message,500,{headers:t,request:e})}))}const Ve=function e(r,s){const t=r.defaults(s);return Object.assign((function(r,s){const o=t.merge(r,s);if(!o.request||!o.request.hook)return Ke(t.parse(o));const n=(e,r)=>Ke(t.parse(t.merge(e,r)));return Object.assign(n,{endpoint:t,defaults:e.bind(null,t)}),o.request.hook(n,o)}),{endpoint:t,defaults:e.bind(null,t)})}($e,{headers:{"user-agent":"octokit-request.js/5.4.12 "+ne()}});class Ye extends Error{constructor(e,r){super(r.data.errors[0].message),Object.assign(this,r.data),Object.assign(this,{headers:r.headers}),this.name="GraphqlError",this.request=e,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}const Je=["method","baseUrl","url","headers","request","query","mediaType"],Ze=/\/api\/v3\/?$/;function Xe(e,r){const s=e.defaults(r);return Object.assign(((e,r)=>function(e,r,s){if("string"==typeof r&&s&&"query"in s)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));const t="string"==typeof r?Object.assign({query:r},s):r,o=Object.keys(t).reduce(((e,r)=>Je.includes(r)?(e[r]=t[r],e):(e.variables||(e.variables={}),e.variables[r]=t[r],e)),{}),n=t.baseUrl||e.endpoint.DEFAULTS.baseUrl;return Ze.test(n)&&(o.url=n.replace(Ze,"/api/graphql")),e(o).then((e=>{if(e.data.errors){const r={};for(const s of Object.keys(e.headers))r[s]=e.headers[s];throw new Ye(o,{headers:r,data:e.data})}return e.data.data}))}(s,e,r)),{defaults:Xe.bind(null,s),endpoint:Ve.endpoint})}Xe(Ve,{headers:{"user-agent":"octokit-graphql.js/4.5.8 "+ne()},method:"POST",url:"/graphql"});async function Qe(e){const r=3===e.split(/\./).length?"app":/^v\d+\./.test(e)?"installation":"oauth";return{type:"token",token:e,tokenType:r}}async function er(e,r,s,t){const o=r.endpoint.merge(s,t);return o.headers.authorization=function(e){return 3===e.split(/\./).length?"bearer "+e:"token "+e}(e),r(o)}const rr=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(Qe.bind(null,e),{hook:er.bind(null,e)})},sr="3.2.4";class tr{constructor(e={}){const r=new we,s={baseUrl:Ve.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};var t;if(s.headers["user-agent"]=[e.userAgent,"octokit-core.js/3.2.4 "+ne()].filter(Boolean).join(" "),e.baseUrl&&(s.baseUrl=e.baseUrl),e.previews&&(s.mediaType.previews=e.previews),e.timeZone&&(s.headers["time-zone"]=e.timeZone),this.request=Ve.defaults(s),this.graphql=(t=this.request,Xe(t,{method:"POST",url:"/graphql"})).defaults(s),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},e.log),this.hook=r,e.authStrategy){const{authStrategy:s,...t}=e,o=s(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:t},e.auth));r.wrap("request",o.hook),this.auth=o}else if(e.auth){const s=rr(e.auth);r.wrap("request",s.hook),this.auth=s}else this.auth=async()=>({type:"unauthenticated"});this.constructor.plugins.forEach((r=>{Object.assign(this,r(this,e))}))}static defaults(e){return class extends(this){constructor(...r){const s=r[0]||{};super("function"!=typeof e?Object.assign({},e,s,s.userAgent&&e.userAgent?{userAgent:`${s.userAgent} ${e.userAgent}`}:null):e(s))}}}static plugin(...e){var r;const s=this.plugins;return(r=class extends(this){}).plugins=s.concat(e.filter((e=>!s.includes(e)))),r}}tr.VERSION=sr,tr.plugins=[];function or(e){e.hook.wrap("request",((r,s)=>{e.log.debug("request",s);const t=Date.now(),o=e.request.endpoint.parse(s),n=o.url.replace(s.baseUrl,"");return r(s).then((r=>(e.log.info(`${o.method} ${n} - ${r.status} in ${Date.now()-t}ms`),r))).catch((r=>{throw e.log.info(`${o.method} ${n} - ${r.status} in ${Date.now()-t}ms`),r}))}))}or.VERSION="1.0.2";function nr(e,r,s){const t="function"==typeof r?r.endpoint(s):e.request.endpoint(r,s),o="function"==typeof r?r:e.request,n=t.method,i=t.headers;let a=t.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};const e=function(e){if(!("total_count"in e.data)||"url"in e.data)return e;const r=e.data.incomplete_results,s=e.data.repository_selection,t=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const o=Object.keys(e.data)[0],n=e.data[o];return e.data=n,void 0!==r&&(e.data.incomplete_results=r),void 0!==s&&(e.data.repository_selection=s),e.data.total_count=t,e}(await o({method:n,url:a,headers:i}));return a=((e.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:e}}})}}function ir(e,r,s,t){return"function"==typeof s&&(t=s,s=void 0),ar(e,[],nr(e,r,s)[Symbol.asyncIterator](),t)}function ar(e,r,s,t){return s.next().then((o=>{if(o.done)return r;let n=!1;return r=r.concat(t?t(o.value,(function(){n=!0})):o.value.data),n?r:ar(e,r,s,t)}))}Object.assign(ir,{iterator:nr});function cr(e){return{paginate:Object.assign(ir.bind(null,e),{iterator:nr.bind(null,e)})}}cr.VERSION="2.6.2";const pr={actions:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createContentAttachment:["POST /content_references/{content_reference_id}/attachments",{mediaType:{previews:["corsair"]}}],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct",{mediaType:{previews:["scarlet-witch"]}}],getConductCode:["GET /codes_of_conduct/{key}",{mediaType:{previews:["scarlet-witch"]}}],getForRepo:["GET /repos/{owner}/{repo}/community/code_of_conduct",{mediaType:{previews:["scarlet-witch"]}}]},emojis:{get:["GET /emojis"]},enterpriseAdmin:{disableSelectedOrganizationGithubActionsEnterprise:["DELETE /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],enableSelectedOrganizationGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations/{org_id}"],getAllowedActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/selected-actions"],getGithubActionsPermissionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions"],listSelectedOrganizationsEnabledGithubActionsEnterprise:["GET /enterprises/{enterprise}/actions/permissions/organizations"],setAllowedActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/selected-actions"],setGithubActionsPermissionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions"],setSelectedOrganizationsEnabledGithubActionsEnterprise:["PUT /enterprises/{enterprise}/actions/permissions/organizations"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits"]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",{mediaType:{previews:["mockingbird"]}}],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}",{mediaType:{previews:["wyandotte"]}}],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}",{mediaType:{previews:["wyandotte"]}}],listForAuthenticatedUser:["GET /user/migrations",{mediaType:{previews:["wyandotte"]}}],listForOrg:["GET /orgs/{org}/migrations",{mediaType:{previews:["wyandotte"]}}],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories",{mediaType:{previews:["wyandotte"]}}],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{mediaType:{previews:["wyandotte"]}}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock",{mediaType:{previews:["wyandotte"]}}],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",{mediaType:{previews:["wyandotte"]}}],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{blockUser:["PUT /orgs/{org}/blocks/{username}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}",{mediaType:{previews:["inertia"]}}],createCard:["POST /projects/columns/{column_id}/cards",{mediaType:{previews:["inertia"]}}],createColumn:["POST /projects/{project_id}/columns",{mediaType:{previews:["inertia"]}}],createForAuthenticatedUser:["POST /user/projects",{mediaType:{previews:["inertia"]}}],createForOrg:["POST /orgs/{org}/projects",{mediaType:{previews:["inertia"]}}],createForRepo:["POST /repos/{owner}/{repo}/projects",{mediaType:{previews:["inertia"]}}],delete:["DELETE /projects/{project_id}",{mediaType:{previews:["inertia"]}}],deleteCard:["DELETE /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],deleteColumn:["DELETE /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}],get:["GET /projects/{project_id}",{mediaType:{previews:["inertia"]}}],getCard:["GET /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],getColumn:["GET /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission",{mediaType:{previews:["inertia"]}}],listCards:["GET /projects/columns/{column_id}/cards",{mediaType:{previews:["inertia"]}}],listCollaborators:["GET /projects/{project_id}/collaborators",{mediaType:{previews:["inertia"]}}],listColumns:["GET /projects/{project_id}/columns",{mediaType:{previews:["inertia"]}}],listForOrg:["GET /orgs/{org}/projects",{mediaType:{previews:["inertia"]}}],listForRepo:["GET /repos/{owner}/{repo}/projects",{mediaType:{previews:["inertia"]}}],listForUser:["GET /users/{username}/projects",{mediaType:{previews:["inertia"]}}],moveCard:["POST /projects/columns/cards/{card_id}/moves",{mediaType:{previews:["inertia"]}}],moveColumn:["POST /projects/columns/{column_id}/moves",{mediaType:{previews:["inertia"]}}],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}",{mediaType:{previews:["inertia"]}}],update:["PATCH /projects/{project_id}",{mediaType:{previews:["inertia"]}}],updateCard:["PATCH /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],updateColumn:["PATCH /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",{mediaType:{previews:["lydian"]}}],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteLegacy:["DELETE /reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}},{deprecated:"octokit.reactions.deleteLegacy() is deprecated, see https://docs.github.com/v3/reactions/#delete-a-reaction-legacy"}],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createPagesSite:["POST /repos/{owner}/{repo}/pages",{mediaType:{previews:["switcheroo"]}}],createRelease:["POST /repos/{owner}/{repo}/releases"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate",{mediaType:{previews:["baptiste"]}}],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages",{mediaType:{previews:["switcheroo"]}}],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes",{mediaType:{previews:["london"]}}],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes",{mediaType:{previews:["london"]}}],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",{mediaType:{previews:["groot"]}}],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",{mediaType:{previews:["groot"]}}],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits",{mediaType:{previews:["cloak"]}}],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics",{mediaType:{previews:["mercy"]}}],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",{mediaType:{previews:["inertia"]}}],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",{mediaType:{previews:["inertia"]}}],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects",{mediaType:{previews:["inertia"]}}],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys"],deleteEmailForAuthenticated:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};function lr(e,r,s,t,o){const n=e.request.defaults(t);return Object.assign((function(...t){let i=n.endpoint.merge(...t);if(o.mapToData)return i=Object.assign({},i,{data:i[o.mapToData],[o.mapToData]:void 0}),n(i);if(o.renamed){const[t,n]=o.renamed;e.log.warn(`octokit.${r}.${s}() has been renamed to octokit.${t}.${n}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const i=n.endpoint.merge(...t);for(const[t,n]of Object.entries(o.renamedParameters))t in i&&(e.log.warn(`"${t}" parameter is deprecated for "octokit.${r}.${s}()". Use "${n}" instead`),n in i||(i[n]=i[t]),delete i[t]);return n(i)}return n(...t)}),n)}function ur(e){return function(e,r){const s={};for(const[t,o]of Object.entries(r))for(const[r,n]of Object.entries(o)){const[o,i,a]=n,[c,p]=o.split(/ /),l=Object.assign({method:c,url:p},i);s[t]||(s[t]={});const u=s[t];u[r]=a?lr(e,t,r,l,a):e.request.defaults(l)}return s}(e,pr)}ur.VERSION="4.4.1";const dr=new(tr.plugin(or,ur,cr).defaults({userAgent:"octokit-rest.js/18.0.12"})),mr=()=>dr.issues.listForRepo({owner:"zeikar",repo:"issueage"}),gr=e=>dr.issues.get({owner:"zeikar",repo:"issueage",issue_number:e});function Tr(r){let s,t,o,n,i,m,h,E,w,f,b,_,v,y,G,k,P,O=r[0].title+"",A=r[0].body+"",S=r[0].created_at+"";return{c(){s=l("div"),t=l("div"),t.innerHTML='<img class="article-image" src="https://lunawood.com/wp-content/uploads/2018/02/placeholder-image.png" alt="article thumbnail"/>',o=d(),n=l("div"),i=l("nav"),m=l("div"),h=l("h2"),E=u(O),w=d(),f=l("p"),b=u(A),_=d(),v=l("p"),y=l("span"),y.innerHTML='<i class="fas fa-clock"></i> \n          ',G=u(S),g(t,"class","column has-text-centered"),g(f,"class","article-content"),g(y,"class","icon"),g(m,"class","content"),g(i,"class","level"),g(n,"class","column is-four-fifths"),g(s,"class","article-wrapper columns is-desktop svelte-wh0ky3")},m(e,p){var l,u,d,g;c(e,s,p),a(s,t),a(s,o),a(s,n),a(n,i),a(i,m),a(m,h),a(h,E),a(m,w),a(m,f),a(f,b),a(m,_),a(m,v),a(v,y),a(v,G),k||(l=s,u="click",d=r[1],l.addEventListener(u,d,g),P=()=>l.removeEventListener(u,d,g),k=!0)},p(e,[r]){1&r&&O!==(O=e[0].title+"")&&T(E,O),1&r&&A!==(A=e[0].body+"")&&T(b,A),1&r&&S!==(S=e[0].created_at+"")&&T(G,S)},i:e,o:e,d(e){e&&p(s),k=!1,P()}}}function hr(e,r,s){let{issue:t}=r;return e.$$set=e=>{"issue"in e&&s(0,t=e.issue)},[t,function(){!async function(e){if(!e||e.length<1||"/"!=e.charAt(0)&&0!==e.indexOf("#/"))throw Error("Invalid parameter location");await S(),history.replaceState({scrollX:window.scrollX,scrollY:window.scrollY},void 0,void 0),window.location.hash=("#"==e.charAt(0)?"":"#")+e}("/articles/"+t.number)}]}class Er extends K{constructor(e){super(),N(this,e,hr,Tr,i,{issue:0})}}function wr(e,r,s){const t=e.slice();return t[1]=r[s],t}function fr(e){let r,s;return r=new Er({props:{issue:e[1]}}),{c(){B(r.$$.fragment)},m(e,t){z(r,e,t),s=!0},p(e,s){const t={};1&s&&(t.issue=e[1]),r.$set(t)},i(e){s||(I(r.$$.fragment,e),s=!0)},o(e){x(r.$$.fragment,e),s=!1},d(e){M(r,e)}}}function br(e){let r,s,t,o=e[0],n=[];for(let r=0;r<o.length;r+=1)n[r]=fr(wr(e,o,r));const i=e=>x(n[e],1,1,(()=>{n[e]=null}));return{c(){r=l("section"),s=l("div");for(let e=0;e<n.length;e+=1)n[e].c();g(s,"class","container"),g(r,"class","section")},m(e,o){c(e,r,o),a(r,s);for(let e=0;e<n.length;e+=1)n[e].m(s,null);t=!0},p(e,[r]){if(1&r){let t;for(o=e[0],t=0;t<o.length;t+=1){const i=wr(e,o,t);n[t]?(n[t].p(i,r),I(n[t],1)):(n[t]=fr(i),n[t].c(),I(n[t],1),n[t].m(s,null))}for(L(),t=o.length;t<n.length;t+=1)i(t);q()}},i(e){if(!t){for(let e=0;e<o.length;e+=1)I(n[e]);t=!0}},o(e){n=n.filter(Boolean);for(let e=0;e<n.length;e+=1)x(n[e]);t=!1},d(e){e&&p(r),function(e,r){for(let s=0;s<e.length;s+=1)e[s]&&e[s].d(r)}(n,e)}}}function _r(e,r,s){let t=[];return f((()=>{(async()=>{try{return await mr()}catch(e){console.error(e)}})().then((e=>{console.log(e.data),s(0,t=e.data)})).catch((e=>{console.error(e)}))})),[t]}class vr extends K{constructor(e){super(),N(this,e,_r,br,i,{})}}function yr(e){let r,s,t,o,n,i,m,h,E,w,f,b,_,v,y,G=e[0].title+"",k=e[0].updated_at+"",P=e[0].body+"";return{c(){r=l("div"),s=l("section"),t=l("div"),o=l("div"),n=l("h1"),i=u(G),m=d(),h=l("h2"),E=u(k),w=d(),f=l("section"),b=l("div"),_=u(P),v=d(),y=l("section"),g(n,"class","is-size-1 has-text-white"),g(h,"class","subtitle has-text-white"),g(o,"class","container"),g(t,"class","hero-body blur-background svelte-1qx52pu"),g(s,"class","hero post-background is-medium has-text-centered has-background svelte-1qx52pu"),g(b,"class","content post"),g(f,"class","section"),g(y,"class","section"),g(r,"class","container")},m(e,p){c(e,r,p),a(r,s),a(s,t),a(t,o),a(o,n),a(n,i),a(o,m),a(o,h),a(h,E),a(r,w),a(r,f),a(f,b),a(b,_),a(r,v),a(r,y)},p(e,r){1&r&&G!==(G=e[0].title+"")&&T(i,G),1&r&&k!==(k=e[0].updated_at+"")&&T(E,k),1&r&&P!==(P=e[0].body+"")&&T(_,P)},d(e){e&&p(r)}}}function Gr(r){let s,t=r[0]&&yr(r);return{c(){t&&t.c(),s=m()},m(e,r){t&&t.m(e,r),c(e,s,r)},p(e,[r]){e[0]?t?t.p(e,r):(t=yr(e),t.c(),t.m(s.parentNode,s)):t&&(t.d(1),t=null)},i:e,o:e,d(e){t&&t.d(e),e&&p(s)}}}function kr(e,r,s){let{params:t}=r,o=null;return f((()=>{(async e=>{try{return await gr(e)}catch(e){console.error(e)}})(t.issueNumber).then((e=>{console.log(e.data),s(0,o=e.data)})).catch((e=>{console.error(e)}))})),e.$$set=e=>{"params"in e&&s(1,t=e.params)},[o,t]}var Pr={"/":vr,"/articles":vr,"/articles/:issueNumber":class extends K{constructor(e){super(),N(this,e,kr,Gr,i,{params:1})}},"*":vr};function Or(r){let s;return{c(){s=l("nav"),s.innerHTML='<div class="navbar-brand"><a href="/" class="navbar-item">name here</a></div> \n\n  <div class="navbar-menu"><div class="navbar-start"><a href="/" class="navbar-item">menu here</a></div> \n\n    <div class="navbar-end"><div class="navbar-item"><div class="field has-addons"><div class="control"><input class="input is-rounded" type="search" placeholder="search"/></div> \n          <div class="control"><button class="button is-rounded"><span class="icon is-small"><i class="fas fa-search"></i></span></button></div></div></div></div></div>',g(s,"class","navbar is-fixed-top"),g(s,"role","navigation"),g(s,"aria-label","main navigation")},m(e,r){c(e,s,r)},p:e,i:e,o:e,d(e){e&&p(s)}}}class Ar extends K{constructor(e){super(),N(this,e,null,Or,i,{})}}function Sr(r){let s,t,o,n,i;return{c(){s=l("footer"),t=l("div"),o=l("p"),n=l("strong"),i=u(r[0]),g(t,"class","content has-text-centered"),g(s,"class","footer")},m(e,r){c(e,s,r),a(s,t),a(t,o),a(o,n),a(n,i)},p(e,[r]){1&r&&T(i,e[0])},i:e,o:e,d(e){e&&p(s)}}}function Rr(e,r,s){let{websiteTitle:t}=r;return e.$$set=e=>{"websiteTitle"in e&&s(0,t=e.websiteTitle)},[t]}class Fr extends K{constructor(e){super(),N(this,e,Rr,Sr,i,{websiteTitle:0})}}function Cr(r){let s,t,o,n,i,a;return s=new Ar({}),o=new oe({props:{routes:Pr}}),i=new Fr({props:{websiteTitle:"test"}}),{c(){B(s.$$.fragment),t=d(),B(o.$$.fragment),n=d(),B(i.$$.fragment)},m(e,r){z(s,e,r),c(e,t,r),z(o,e,r),c(e,n,r),z(i,e,r),a=!0},p:e,i(e){a||(I(s.$$.fragment,e),I(o.$$.fragment,e),I(i.$$.fragment,e),a=!0)},o(e){x(s.$$.fragment,e),x(o.$$.fragment,e),x(i.$$.fragment,e),a=!1},d(e){M(s,e),e&&p(t),M(o,e),e&&p(n),M(i,e)}}}return new class extends K{constructor(e){super(),N(this,e,null,Cr,i,{})}}({target:document.body,props:{name:"world"}})}();
//# sourceMappingURL=bundle.js.map
